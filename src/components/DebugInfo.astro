---
// src/components/DebugInfo.astro
const { data } = Astro.props;

// Helper function untuk menentukan warna berdasarkan status
const getStatusColor = (status: boolean) => status ? 'text-green-400' : 'text-red-400';
const getStatusIcon = (status: boolean) => status ? '‚úÖ' : '‚ùå';
---

<div class="debug-panel fixed bottom-4 right-4 bg-gray-900 border border-gray-700 rounded-lg shadow-xl max-w-lg max-h-96 overflow-hidden z-50">
  <!-- Debug Panel Header -->
  <div class="debug-header bg-gray-800 px-4 py-3 border-b border-gray-700 flex justify-between items-center">
    <div class="flex items-center gap-2">
      <span class="text-red-400">üîß</span>
      <h3 class="text-white font-mono font-bold text-sm">Debug Information</h3>
    </div>
    <div class="flex gap-2">
      <button 
        id="debugToggle" 
        class="bg-gray-700 hover:bg-gray-600 text-white text-xs px-2 py-1 rounded transition-colors"
      >
        Toggle
      </button>
      <button 
        id="debugCopy" 
        class="bg-blue-600 hover:bg-blue-500 text-white text-xs px-2 py-1 rounded transition-colors"
      >
        Copy
      </button>
    </div>
  </div>

  <!-- Debug Content -->
  <div id="debugContent" class="debug-content p-4 bg-gray-900 overflow-auto max-h-80">
    {data ? (
      <div class="space-y-3">
        <!-- Connection Status -->
        {data.connection && (
          <div class="connection-status">
            <h4 class="text-gray-300 font-mono text-xs font-bold mb-1">KONEKSI DATABASE:</h4>
            <div class={`text-xs font-mono p-2 rounded ${getStatusColor(data.connection.success)} bg-gray-800`}>
              {getStatusIcon(data.connection.success)} {data.connection.message || data.connection.error}
            </div>
          </div>
        )}

        <!-- Environment Variables -->
        {data.environment && (
          <div class="environment-vars">
            <h4 class="text-gray-300 font-mono text-xs font-bold mb-1">ENVIRONMENT VARIABLES:</h4>
            <div class="text-xs font-mono space-y-1">
              <div class="flex justify-between">
                <span>PUBLIC_SUPABASE_URL:</span>
                <span class={data.environment.url.includes('‚úÖ') ? 'text-green-400' : 'text-red-400'}>
                  {data.environment.url}
                </span>
              </div>
              <div class="flex justify-between">
                <span>PUBLIC_SUPABASE_ANON_KEY:</span>
                <span class={data.environment.key.includes('‚úÖ') ? 'text-green-400' : 'text-red-400'}>
                  {data.environment.key}
                </span>
              </div>
            </div>
          </div>
        )}

        <!-- Query Info -->
        {data.query && (
          <div class="query-info">
            <h4 class="text-gray-300 font-mono text-xs font-bold mb-1">QUERY EXECUTED:</h4>
            <pre class="text-xs text-blue-400 bg-gray-800 p-2 rounded overflow-x-auto">
{`Tabel: ${data.query.table}
Operasi: ${data.query.operation}
Status: ${data.query.status} - ${data.query.statusText}`}</pre>
          </div>
        )}

        <!-- Results -->
        {data.result && (
          <div class="results-info">
            <h4 class="text-gray-300 font-mono text-xs font-bold mb-1">QUERY RESULTS:</h4>
            <div class="text-xs text-green-400 bg-gray-800 p-2 rounded">
              Data ditemukan: {data.result.dataCount} items<br />
              Total count: {data.result.totalCount || 'N/A'}
              {data.result.columns && (
                <>
                  <br />Columns: {data.result.columns.join(', ')}
                </>
              )}
            </div>
            {/* Sample Data Preview */}
            {data.result.sampleData && data.result.sampleData.length > 0 && (
              <details class="sample-data mt-2">
                <summary class="text-gray-300 font-mono text-xs font-bold cursor-pointer hover:text-white">
                  SAMPLE DATA (2 items):
                </summary>
                <pre class="text-xs text-purple-400 bg-gray-800 p-2 rounded mt-1 overflow-x-auto whitespace-pre-wrap">
{JSON.stringify(data.result.sampleData, null, 2)}</pre>
              </details>
            )}
          </div>
        )}

        <!-- Errors -->
        {data.error && (
          <div class="errors-info">
            <h4 class="text-gray-300 font-mono text-xs font-bold mb-1">ERRORS:</h4>
            <pre class="text-xs text-red-400 bg-gray-800 p-2 rounded overflow-x-auto">
{`Message: ${data.error.message}
Code: ${data.error.code || 'N/A'}
Details: ${data.error.details || 'N/A'}`}</pre>
          </div>
        )}

        <!-- Raw Data (Collapsible) -->
        <details class="raw-data">
          <summary class="text-gray-300 font-mono text-xs font-bold cursor-pointer hover:text-white">
            RAW DEBUG DATA:
          </summary>
          <pre class="text-xs text-yellow-400 bg-gray-800 p-2 rounded mt-1 overflow-x-auto whitespace-pre-wrap">
{JSON.stringify(data, null, 2)}</pre>
        </details>
      </div>
    ) : (
      <div class="text-yellow-400 text-xs font-mono">
        Tidak ada data debug yang tersedia
      </div>
    )}
  </div>

  <!-- Timestamp -->
  {data?.timestamp && (
    <div class="debug-footer bg-gray-800 px-4 py-2 border-t border-gray-700">
      <div class="text-gray-400 text-xs font-mono">
        Generated: {new Date(data.timestamp).toLocaleTimeString()}
      </div>
    </div>
  )}
</div>

<style>
  .debug-panel {
    font-family: 'Fira Code', 'Monaco', 'Consolas', monospace;
    backdrop-filter: blur(10px);
  }
  
  .debug-content {
    scrollbar-width: thin;
    scrollbar-color: #4B5563 #1F2937;
  }
  
  .debug-content::-webkit-scrollbar {
    width: 6px;
  }
  
  .debug-content::-webkit-scrollbar-track {
    background: #1F2937;
  }
  
  .debug-content::-webkit-scrollbar-thumb {
    background: #4B5563;
    border-radius: 3px;
  }
  
  .debug-content::-webkit-scrollbar-thumb:hover {
    background: #6B7280;
  }
  
  pre {
    font-size: 0.75rem;
    line-height: 1.2;
  }
</style>

<script>
  // Toggle debug panel visibility
  document.getElementById('debugToggle')?.addEventListener('click', function() {
    const content = document.getElementById('debugContent');
    const footer = document.querySelector('.debug-footer');
    
    if (content.style.display === 'none') {
      content.style.display = 'block';
      footer && (footer.style.display = 'block');
      this.textContent = 'Hide';
    } else {
      content.style.display = 'none';
      footer && (footer.style.display = 'none');
      this.textContent = 'Show';
    }
  });

  // Copy debug info to clipboard
  document.getElementById('debugCopy')?.addEventListener('click', function() {
    // Dapatkan data dari elemen pre yang berisi raw data
    const rawDataElement = document.querySelector('.raw-data pre');
    if (rawDataElement) {
      const debugData = rawDataElement.textContent;
      navigator.clipboard.writeText(debugData)
        .then(() => {
          const originalText = this.textContent;
          this.textContent = 'Copied!';
          this.classList.add('bg-green-600');
          setTimeout(() => {
            this.textContent = originalText;
            this.classList.remove('bg-green-600');
          }, 2000);
        })
        .catch(err => {
          console.error('Failed to copy debug info:', err);
          // Fallback untuk browser yang tidak support clipboard API
          const textArea = document.createElement('textarea');
          textArea.value = debugData;
          document.body.appendChild(textArea);
          textArea.select();
          try {
            document.execCommand('copy');
            this.textContent = 'Copied!';
            this.classList.add('bg-green-600');
            setTimeout(() => {
              this.textContent = originalText;
              this.classList.remove('bg-green-600');
            }, 2000);
          } catch (fallbackErr) {
            console.error('Fallback copy also failed:', fallbackErr);
          }
          document.body.removeChild(textArea);
        });
    } else {
      console.error('Debug data element not found');
    }
  });

  // Auto-hide debug panel jika terlalu besar
  document.addEventListener('DOMContentLoaded', function() {
    const debugContent = document.getElementById('debugContent');
    if (debugContent && debugContent.scrollHeight > 300) {
      debugContent.style.display = 'none';
      document.getElementById('debugToggle').textContent = 'Show';
    }
  });
</script>